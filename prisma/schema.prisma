// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String    @unique
  emailVerified DateTime?
  image         String?
  name          String    @unique @db.VarChar(255)
  password      String    @db.VarChar(255)
  accounts      Account[]
  sessions      Session[]
  payments      Payment[]
  projects      Project[]
  companies     Company[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Budget {
  id        String      @id @default(cuid())
  type      PaymentType
  value     Decimal     @db.Decimal(10, 2)
  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  @@unique([companyId, type])
}

enum PaymentType {
  materials
  services
}

model Payment {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  paymentDate DateTime    @default(now())
  title       String      @db.VarChar(255)
  slug        String      @db.VarChar(255)
  type        PaymentType
  details     String?     @db.VarChar(5000)
  files       String[]
  paid        Boolean     @default(false)
  price       Decimal     @db.Decimal(10, 2)
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String

  @@unique([slug, companyId])
}

model Project {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  userId    String
  slug      String    @db.VarChar(255)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  finished  Boolean   @default(false)
  companies Company[]

  @@unique([slug, userId])
  @@unique([name, userId])
}

model Company {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String    @db.VarChar(255)
  slug      String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  startDate DateTime  @default(now())
  endDate   DateTime?
  details   String?   @db.VarChar(5000)
  files     String[]
  payments  Payment[]
  budgets   Budget[]
  projectId String
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([slug, projectId])
}
